{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GrifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GrifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","Images","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,MAKlB,UACI,8CACA,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfpB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,+BCNjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEkCC,UAAUH,GAF5C,+DAGII,MAAMF,GAHV,cAGdG,EAHc,gBAICA,EAASC,OAJV,uBAIbC,EAJa,EAIbA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATrB,kBAabM,GAba,4CAAH,sDCARO,EAAe,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,gDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACrB,ECFwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVCC,qBAAW,WACRxB,EAAQC,GACPwB,MAAK,SAAAC,GACEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGtB,CAACpB,IAEIqB,EDfuBK,CAAa1B,GAA/B2B,EAAZ,EAAOpB,KAAYa,EAAnB,EAAmBA,QAEnB,OACI,qCACA,6BAAKpB,IACJoB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAEUW,EAAOlB,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAEIA,GADEA,EAAIC,aEgBfiB,EAzBM,WAEjB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACK4C,EAAWpB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAAwBA,SAAYA,GAAtBA,Y,MCpB9B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c1d33dcb.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        // console.log('submit hecho')\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(cats=> [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n       \r\n    }\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <h2>Add Category</h2>\r\n            <input type=\"text\" value={inputValue} onChange={handleInputChange}></input>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n export const getGifs = async (category) =>{\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=durizcqA0zdoYeiFQDfhCp1YL6cDHXmZ`;\r\n    const response =  await fetch(url);\r\n    const {data} = await response.json();\r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    // console.log(gifs)\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GrifGridItem = ({title,url}) => {\r\n    // console.log(url)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDownBig\"> \r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n            {/* {img.title} */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GrifGridItem } from './GrifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    const {data:Images,loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3> \r\n        {loading && <p>Loading</p>} \r\n        <div className=\"card-grid\">\r\n              {\r\n                  Images.map((img) => (\r\n                    <GrifGridItem \r\n                    key ={img.id} \r\n                    {...img}/>\r\n                  ))\r\n              }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import  { useState ,useEffect} from 'react';\r\nimport {getGifs}from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n     useEffect( () => {\r\n        getGifs(category)\r\n        .then(imgs =>{\r\n                setState({\r\n                    data:imgs,\r\n                    loading:false\r\n                })\r\n        });\r\n    },[category])\r\n\r\n    return state; // Data [] , loading: true\r\n}\r\n\r\n","import React,{useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//rafc usar esto mejor\r\n\r\nconst GifExpertApp = () =>{\r\n    // const categories = [ 'One punch','Samurai','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One punch']);\r\n\r\n    // const handleAdd = () =>{\r\n        // setCategories([...categories,'HunterXHunter']);\r\n       // setCategories(cats=> [...cats,'HunterXhUNTER']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/>\r\n        <hr/>\r\n\r\n\r\n        {/* <button onClick={handleAdd}>Agregar</button> */}\r\n        <ol>\r\n            {categories.map(category=>\r\n                <GifGrid key={category} category = {category}/>\r\n            )}\r\n        </ol>\r\n        </>\r\n     )\r\n}\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}